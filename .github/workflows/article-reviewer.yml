name: AI Article Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'article-*/**'

permissions:
  pull-requests: write
  contents: read

jobs:
  review-article:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r reviewer-requirements.txt

    - name: Run AI Article Reviewer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PR_NUMBER: ${{ github.event.number }}
        REPOSITORY: ${{ github.repository }}
      run: |
        python .github/scripts/article_reviewer.py

    - name: Comment on PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const reviewData = JSON.parse(fs.readFileSync('review_results.json', 'utf8'));
            
            let comment = `## 🤖 AI Article Review\n\n`;
            
            if (reviewData.overall_score >= 8) {
              comment += `✅ **Excellent work!** This article meets high standards.\n\n`;
            } else if (reviewData.overall_score >= 6) {
              comment += `✨ **Good article** with some areas for improvement.\n\n`;
            } else {
              comment += `📝 **Needs improvement** before publication.\n\n`;
            }
            
            comment += `**Overall Score: ${reviewData.overall_score}/10**\n\n`;
            
            // Add review metadata if available
            if (reviewData.review_metadata) {
              if (reviewData.review_metadata.reviewed_files > 1) {
                comment += `📄 **Files Reviewed:** ${reviewData.review_metadata.reviewed_files}\n`;
              }
              if (reviewData.review_metadata.review_timestamp) {
                comment += `⏰ **Review Completed:** ${reviewData.review_metadata.review_timestamp}\n\n`;
              }
            }
            
            // Add detailed feedback
            for (const [category, feedback] of Object.entries(reviewData.detailed_feedback)) {
              comment += `### ${category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}\n`;
              comment += `**Score: ${feedback.score}/10**\n`;
              comment += `${feedback.feedback}\n\n`;
            }
            
            if (reviewData.suggestions && reviewData.suggestions.length > 0) {
              comment += `### 💡 Key Suggestions\n`;
              reviewData.suggestions.forEach((suggestion, index) => {
                comment += `${index + 1}. ${suggestion}\n`;
              });
              comment += `\n`;
            }
            
            if (reviewData.technical_accuracy_notes) {
              comment += `### 🔍 Technical Accuracy Notes\n`;
              comment += `${reviewData.technical_accuracy_notes}\n\n`;
            }
            
            comment += `---\n*This review was generated by AI. Please use it as guidance alongside human review.*\n\n`;
            
            // Add contextual tagging based on score
            if (reviewData.overall_score >= 8) {
              comment += `@eduard-balamatiuc - Excellent work! Your article review is complete and scored ${reviewData.overall_score}/10! 🌟✨`;
            } else if (reviewData.overall_score >= 6) {
              comment += `@eduard-balamatiuc - Your article review is complete (${reviewData.overall_score}/10). Please check the suggestions above for improvements. 📝💡`;
            } else {
              comment += `@eduard-balamatiuc - Your article review is complete (${reviewData.overall_score}/10). The article needs significant improvements before publication. Please review the feedback carefully. 📝⚠️`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Error reading review results:', error);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🤖 AI Article Reviewer encountered an error. Please check the workflow logs.\n\n@eduard-balamatiuc - The article review failed. Please check the GitHub Actions logs for details. 🔧⚠️'
            });
          } 