name: AI Article Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    paths:
      - 'article-*/**'
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  contents: read

jobs:
  review-article:
    runs-on: ubuntu-latest
    # Only run on PR comments that contain the trigger phrase, or on PR events 
    # (automatically for article-* paths or with 'article' label)
    # Note: labeled events don't respect paths filter, so we filter at job level
    if: |
      (github.event_name == 'pull_request' && 
       (github.event.action != 'labeled' || github.event.label.name == 'article')) ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, 'bugbot run a check'))
    
    steps:
    - name: Get PR head ref for issue_comment events
      if: github.event_name == 'issue_comment'
      id: get-pr-ref
      uses: actions/github-script@v6
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          return pr.data.head.ref;
        result-encoding: string

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event_name == 'issue_comment' && steps.get-pr-ref.outputs.result || github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r reviewer-requirements.txt

    - name: Acknowledge Comment Trigger
      if: github.event_name == 'issue_comment'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ü§ñ AI Reviewer activated! Starting article review process...'
          });

    - name: Run AI Article Reviewer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PR_NUMBER: ${{ github.event_name == 'pull_request' && github.event.number || github.event.issue.number }}
        REPOSITORY: ${{ github.repository }}
      run: |
        python .github/scripts/article_reviewer.py

    - name: Comment on PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const reviewData = JSON.parse(fs.readFileSync('review_results.json', 'utf8'));
            
            // Get thresholds and primary reviewer from review metadata
            const thresholds = reviewData.review_metadata?.quality_thresholds || {
              excellent: 8.5,
              good: 7.0,
              acceptable: 6.0,
              needs_improvement: 4.0,
              poor: 0.0
            };
            const primaryReviewer = reviewData.review_metadata?.primary_reviewer || 'eduard-balamatiuc';
            
            let comment = `## ü§ñ AI Article Review\n\n`;
            
            if (reviewData.overall_score >= thresholds.excellent) {
              comment += `‚úÖ **Excellent work!** This article meets high standards.\n\n`;
            } else if (reviewData.overall_score >= thresholds.good) {
              comment += `‚ú® **Good article** with some areas for improvement.\n\n`;
            } else if (reviewData.overall_score >= thresholds.acceptable) {
              comment += `üëç **Acceptable article** with room for enhancement.\n\n`;
            } else {
              comment += `üìù **Needs improvement** before publication.\n\n`;
            }
            
            comment += `**Overall Score: ${reviewData.overall_score}/10**\n\n`;
            
            // Add review metadata if available
            if (reviewData.review_metadata) {
              if (reviewData.review_metadata.reviewed_files > 1) {
                comment += `üìÑ **Files Reviewed:** ${reviewData.review_metadata.reviewed_files}\n`;
              }
              if (reviewData.review_metadata.review_timestamp) {
                comment += `‚è∞ **Review Completed:** ${reviewData.review_metadata.review_timestamp}\n\n`;
              }
            }
            
            // Add detailed feedback
            for (const [category, feedback] of Object.entries(reviewData.detailed_feedback)) {
              comment += `### ${category.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}\n`;
              comment += `**Score: ${feedback.score}/10**\n`;
              comment += `${feedback.feedback}\n\n`;
            }
            
            if (reviewData.suggestions && reviewData.suggestions.length > 0) {
              comment += `### üí° Key Suggestions\n`;
              reviewData.suggestions.forEach((suggestion, index) => {
                comment += `${index + 1}. ${suggestion}\n`;
              });
              comment += `\n`;
            }
            
            if (reviewData.technical_accuracy_notes) {
              comment += `### üîç Technical Accuracy Notes\n`;
              comment += `${reviewData.technical_accuracy_notes}\n\n`;
            }
            
            comment += `---\n*This review was generated by AI. Please use it as guidance alongside human review.*\n\n`;
            
            // Add context about how the review was triggered
            const triggeredByComment = context.eventName === 'issue_comment';
            if (triggeredByComment) {
              comment += `*Review requested via comment by @${context.payload.comment.user.login}*\n\n`;
            }
            
            // Add contextual tagging based on score
            if (reviewData.overall_score >= thresholds.excellent) {
              comment += `@${primaryReviewer} - Excellent work! Your article review is complete and scored ${reviewData.overall_score}/10! üåü‚ú®`;
            } else if (reviewData.overall_score >= thresholds.good) {
              comment += `@${primaryReviewer} - Your article review is complete (${reviewData.overall_score}/10). Please check the suggestions above for improvements. üìùüí°`;
            } else if (reviewData.overall_score >= thresholds.acceptable) {
              comment += `@${primaryReviewer} - Your article review is complete (${reviewData.overall_score}/10). Please review the suggestions for improvements. üëçüìù`;
            } else {
              comment += `@${primaryReviewer} - Your article review is complete (${reviewData.overall_score}/10). The article needs significant improvements before publication. Please review the feedback carefully. üìù‚ö†Ô∏è`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Error reading review results:', error);
            
            // Try to get primary reviewer from review results if available
            let primaryReviewer = 'eduard-balamatiuc'; // fallback
            try {
              const reviewData = JSON.parse(fs.readFileSync('review_results.json', 'utf8'));
              primaryReviewer = reviewData.review_metadata?.primary_reviewer || 'eduard-balamatiuc';
            } catch (e) {
              // Use fallback if file doesn't exist or is malformed
            }
            
            const triggeredByComment = context.eventName === 'issue_comment';
            const triggerInfo = triggeredByComment ? 
              `\n\n*Review was requested via comment by @${context.payload.comment.user.login}*` : '';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ü§ñ AI Article Reviewer encountered an error. Please check the workflow logs.\n\n@${primaryReviewer} - The article review failed. Please check the GitHub Actions logs for details. üîß‚ö†Ô∏è${triggerInfo}`
            });
          } 